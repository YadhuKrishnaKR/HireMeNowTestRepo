@using AutoMapper;
@using HireMeNow_BlazorApp.Dtos;
@using HireMeNow_BlazorApp.Interfaces;
@using HireMeNow_BlazorApp.Models;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject IMapper _mapper;
@inject IUserService _userService
@inject ProtectedSessionStorage ProtectedSessionStore
<h4>Add Education</h4>
<hr />
<div class="row">
    <div class="col-md-10">
        <form >
            <div class="text-danger"></div>
            @*  <div class="form-group">
            <label @bind="education.Id" class="control-label"></label>
            <input @bind="education.Id" class="form-control" />
            <span asp-validation-for="Id" class="text-danger"></span>
            </div>*@
            <div class="form-group">
                <label class="control-label"> Course</label>
                <input @bind="education.Title" class="form-control" />
                <span asp-validation-for="Course" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Mark</label>
                <input @bind="education.Mark" class="form-control" />
                <span asp-validation-for="Mark" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Year</label>
                <input @bind="education.YearOfPassout" class="form-control" />
                <span asp-validation-for="Year" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label"> University</label>
                <input @bind="education.University" class="form-control" />
                <span asp-validation-for="University" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="button" value="Create" class="btn btn-primary" @onclick="AddEducation" />
            </div>
        </form>
    </div>
</div>

<div>
</div>


@code {

    [Parameter]
    public Qualification education { get; set; } = new();
    [Parameter]
    public UserDto userModel { get; set; } = new();
    [Parameter]
    public UserProfileDto UsersModel { get; set; } = new();
    [Parameter]
    public EventCallback OnButtonClick { get; set; } = new();
    [Parameter]
    public Guid UserId { get; set; }

    public async Task AddEducation()
    {

        if (!String.IsNullOrEmpty(education.Title))
        {
            var loggedUser = _userService.getLoggedUser();
            education.Status = "A";
            education.UserId = loggedUser.Id;
            _userService.AddQualification(education,loggedUser.Id);
             await OnButtonClick.InvokeAsync();
        }

       
    }
   
}
